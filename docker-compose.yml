version: '3.2'
networks:
  monitoring:
    name: monitoring
    driver: bridge
services:
  #=======Prometheus Service===================================
  prometheus_m1:
    image: prom/prometheus:${PROMETHEUS_TAG}
    container_name: prometheus_m1
    ports:
    - 9090:9090
    networks:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.size=${PROMETHEUS_SIZE}'
      - '--storage.tsdb.retention.time=${PROMETHEUS_TIME}'
      - '--storage.tsdb.path=/prometheus'
      # curl -X POST http://localhost:9090/-/reload can be used
      # if this flag is set
      - '--web.enable-lifecycle'
      # curl -X POST http://localhost:9090/api/v2/admin/tsdb/snapshot can be used
      # if this flag is set
      # Ref1: https://suraj.io/post/how-to-backup-and-restore-prometheus/
      # Ref2: https://www.robustperception.io/taking-snapshots-of-prometheus-data
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus/master/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    
  prometheus_s1:
    image: prom/prometheus:${PROMETHEUS_TAG}
    container_name: prometheus_s1
    #ports:
    #- 9091:9090
    networks:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.size=${PROMETHEUS_SIZE}'
      - '--storage.tsdb.retention.time=${PROMETHEUS_TIME}'
      - '--storage.tsdb.path=/prometheus'
      - '--web.listen-address=0.0.0.0:9090'
    volumes:
      - ./prometheus/slave/prometheus1.yml:/etc/prometheus/prometheus.yml:ro
    
  prometheus_s2:
    image: prom/prometheus:${PROMETHEUS_TAG}
    container_name: prometheus_s2
    #ports:
    #- 9092:9090
    networks:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.size=${PROMETHEUS_SIZE}'
      - '--storage.tsdb.retention.time=${PROMETHEUS_TIME}'
      - '--storage.tsdb.path=/prometheus'
      - '--web.listen-address=0.0.0.0:9090'
    volumes:
      - ./prometheus/slave/prometheus2.yml:/etc/prometheus/prometheus.yml:ro
  
  #=======Containers whose metrics will be collected=======
  node_exporter1:
    image: prom/node-exporter:${NODE_EXPORTER_TAG}
    container_name: node_exporter1
    networks:
      - monitoring
    
  node_exporter2:
    image: prom/node-exporter:${NODE_EXPORTER_TAG}
    container_name: node_exporter2
    networks:
      - monitoring
    
  #=======Grafana Service===================================
  grafana:
    image: grafana/grafana:${GRAFANA_TAG}
    container_name: grafana
    user: root:root
    restart: unless-stopped
    ports:
      - 3000:3000
    networks:
      - monitoring
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASS}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
  
  #=======InfluxDB Service==================================
  influxdb:
    image: influxdb:${INFLUXDB_TAG}
    container_name: influxdb
    ports:
      - '8086:8086'
    networks:
      - monitoring
    volumes:
      - ./influxdb/data:/var/lib/influxdb2:rw
    #env_file:
      #- ./influxdb/.env
    entrypoint: ["./entrypoint.sh"]
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=${DOCKER_INFLUXDB_INIT_MODE}
      - DOCKER_INFLUXDB_INIT_USERNAME=${DOCKER_INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${DOCKER_INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_RETENTION=${DOCKER_INFLUXDB_INIT_RETENTION}
      - DOCKER_INFLUXDB_INIT_HOST=${DOCKER_INFLUXDB_INIT_HOST}

  #=======Telegraf Service==================================
  telegraf:
    image: telegraf:${TELEGRAF_TAG}
    container_name: telegraf
    networks:
      - monitoring
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:rw
    #env_file:
      #- ./influxdb/.env
    depends_on:
      - influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_HOST=${DOCKER_INFLUXDB_INIT_HOST}
      